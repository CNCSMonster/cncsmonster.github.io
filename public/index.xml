<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CCM&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on CCM&#39;s Blog</description>
    <generator>Hugo -- 0.138.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Dec 2024 23:27:01 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于llm的命令行英文翻译工具trans-go</title>
      <link>http://localhost:1313/post/%E5%9F%BA%E4%BA%8Ellm%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%8B%B1%E6%96%87%E7%BF%BB%E8%AF%91%E5%B7%A5%E5%85%B7trans-go/</link>
      <pubDate>Sat, 14 Dec 2024 23:27:01 +0800</pubDate>
      <guid>http://localhost:1313/post/%E5%9F%BA%E4%BA%8Ellm%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%8B%B1%E6%96%87%E7%BF%BB%E8%AF%91%E5%B7%A5%E5%85%B7trans-go/</guid>
      <description>&lt;p&gt;仓库地址: &lt;a href=&#34;https://github.com/cncsmonster/trans-go&#34;&gt;https://github.com/cncsmonster/trans-go&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装方式&#34;&gt;安装方式&lt;/h2&gt;
&lt;p&gt;前提条件: 安装了go编译器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github/cncsmonster/trans-go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./install.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置方式&#34;&gt;配置方式&lt;/h2&gt;
&lt;p&gt;该工具利用openai api风格的llm服务工作，需要配置三个环境变量:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OPENAI_API_KEY: 服务密钥&lt;/li&gt;
&lt;li&gt;OPENAI_API_BASE_URL: 服务地址&lt;/li&gt;
&lt;li&gt;MODEL: 使用的模型名称&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;笔者测试了国内的若干中文模型的服务，综合性价比和效果等因素发现使用deepseek家的服务已经比较实用了，可以使用如下配置:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OPENAI_API_KEY&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;你的deepseek家的api key&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OPENAI_API_BASE_URL&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.deepseek.com/v1/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MODEL&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deepseek-chat&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以使用本机部署的ollama提供的openai兼容接口，开源模型的话&lt;code&gt;qwen2.5:14b&lt;/code&gt;已经能够基本满足需要&lt;/p&gt;
&lt;h2 id=&#34;使用方式&#34;&gt;使用方式&lt;/h2&gt;
&lt;p&gt;基础用法: 读取第一个命令行参数以外的参数, 作为要翻译的英文文本，逐个翻译&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 如下命令会依次翻译hello world 和 good morning&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trans &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;good morning&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;翻译多行文件: 可以直接输入&lt;code&gt;trans&lt;/code&gt;，然后粘贴文本，按&lt;code&gt;ctrl+d&lt;/code&gt;然后按下enter键输入&lt;code&gt;EOF&lt;/code&gt;来结束输入&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直接使用&lt;code&gt;trans&lt;/code&gt;会读取标准输入直到遇到EOF，然后翻译标准输入中的内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译文件: &lt;code&gt;cat $FILE | trans&lt;/code&gt;，$FILE替换成要翻译的文件路径&lt;/p&gt;
&lt;p&gt;翻译help文档: 直接使用&lt;code&gt;trans&lt;/code&gt;会翻译标准输入中的内容，可以结合管道用于翻译cli工具的help文档为英文，可以使用如下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go help | trans
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>使用mise替换fgm</title>
      <link>http://localhost:1313/post/%E4%BD%BF%E7%94%A8mise%E6%9B%BF%E6%8D%A2fgm/</link>
      <pubDate>Fri, 13 Dec 2024 21:15:54 +0800</pubDate>
      <guid>http://localhost:1313/post/%E4%BD%BF%E7%94%A8mise%E6%9B%BF%E6%8D%A2fgm/</guid>
      <description>&lt;p&gt;mise能够完全覆盖fgm的功能和使用场景，而且不仅仅能够用来管理Golang工具链，还能够用来管理其他语言的工具链，比如nodejs、neovim、java等等。
甚至我们还能够用mise来替换direnv，实现管理进入退出目录时的环境变量加载和卸载。&lt;/p&gt;
&lt;p&gt;下面将从三方面带你感受笔者使用mise的体验:&lt;/p&gt;
&lt;h2 id=&#34;一-下载-mise&#34;&gt;一. 下载 mise&lt;/h2&gt;
&lt;p&gt;方式1: 通过包安装管理器安装mise&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 需要先安装cargo-binstall和rust工具链&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cargo binstall mise
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方式2: 从仓库预编译版本下载资源列表中下载, 解压缩后把mise可执行文件放到可执行文件目录即可
&lt;a href=&#34;https://github.com/jdx/mise/releases&#34;&gt;release链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;二-使用mise管理go版本&#34;&gt;二. 使用mise管理go版本&lt;/h2&gt;
&lt;h3 id=&#34;0-初始化mise&#34;&gt;0. 初始化mise&lt;/h3&gt;
&lt;p&gt;在自己的shell配置文件中加入如下命令，其中&lt;code&gt;$SH&lt;/code&gt;替换成自己的shell的名称，比如&lt;code&gt;bash&lt;/code&gt;、&lt;code&gt;zsh&lt;/code&gt;等等&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 初始化mise&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mise activate $SH
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1-管理局部目录中的go版本&#34;&gt;1. 管理局部目录中的go版本&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 切换go工具链到指定版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mise use go@1.23.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一次在某个目录使用mise时，mise会报错，提示需要先信任当前目录采用的mise配置，此时可以通过&lt;code&gt;mise trust&lt;/code&gt;命令来信任当前目录的mise配置。
之后，再次使用&lt;code&gt;mise use go@1.23.1&lt;/code&gt;命令，mise会自动下载并安装go1.23.1版本，并且将当前目录的go工具链切换到go1.23.1版本。同时，mise会自动在当前目录创建一个mise.toml文件，用来记录当前目录的mise配置信息。&lt;/p&gt;
&lt;p&gt;如果当前目录或者父目录中已经存在被信任的mise配置文件mise.toml，那么mise会使用该配置文件工作，使用&lt;code&gt;mise use go@1.23.1&lt;/code&gt;之类的命令时，mise会把新配置更新到该配置文件中。&lt;/p&gt;
&lt;p&gt;mise使用全局配置文件，一般在&lt;code&gt;$XDG_CONFIG_HOME/mise/config.toml&lt;/code&gt;中，可以通过&lt;code&gt;mise config&lt;/code&gt;命令查看和修改全局配置文件。
使用&lt;code&gt;mise&lt;/code&gt;时，可以通过&lt;code&gt;-g&lt;/code&gt;选项来指定是否使用全局配置文件，此外，如果在本目录以及父目录中找不到mise配置文件，mise也会自动使用全局配置文件。&lt;/p&gt;
&lt;h2 id=&#34;三-使用mise管理进出目录时的环境变量加载和卸载&#34;&gt;三. 使用mise管理进出目录时的环境变量加载和卸载&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用mise设置环境变量RUSTUP_BACKTRACE=1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mise env set RUSTUP_BACKTRACE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该命令执行成功后，每次进入该目录时，mise会自动加载RUSTUP_BACKTRACE=1环境变量，退出该目录时，mise会自动卸载RUSTUP_BACKTRACE=1环境变量，使用该环境变量原本的值(如果原本该环境变量已经存在)或者删除该环境变量。&lt;/p&gt;
&lt;p&gt;需要注意的是，使用该命令时，mise会先进行配置文件检查，如果是初次使用的区域，同样需要先执行&lt;code&gt;mise trust&lt;/code&gt;命令。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用fgm管理Go版本</title>
      <link>http://localhost:1313/post/%E4%BD%BF%E7%94%A8fgm%E7%AE%A1%E7%90%86go%E7%89%88%E6%9C%AC/</link>
      <pubDate>Sat, 21 Sep 2024 23:35:50 +0800</pubDate>
      <guid>http://localhost:1313/post/%E4%BD%BF%E7%94%A8fgm%E7%AE%A1%E7%90%86go%E7%89%88%E6%9C%AC/</guid>
      <description>&lt;p&gt;想自由的搜索当前go发布的版本以及下载各种版本到本地以及自由切换，你可以尝试使用fgm&lt;/p&gt;
&lt;h2 id=&#34;下载-fgm&#34;&gt;下载 fgm&lt;/h2&gt;
&lt;p&gt;首先配置Rust工具链，然后可以通过cargo 下载它 &lt;code&gt;cargo install fgm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为了快速获取预编译版本,你也可以使用&lt;code&gt;cargo-binstall&lt;/code&gt;: &lt;code&gt;cargo binstall fgm&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;快速体验&#34;&gt;快速体验&lt;/h2&gt;
&lt;p&gt;然后:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化fnm使用需要的环境变量&lt;code&gt;eval $(fgm init)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(Optional) 加载fnm shell补全配置, &lt;code&gt;eval $(fgm completions --shell &amp;lt;shell&amp;gt;)&lt;/code&gt;, 这里的&lt;!-- raw HTML omitted --&gt;可以是zsh、bash等等&lt;/li&gt;
&lt;li&gt;查询当前系统-架构下可获取的预编译的go版本,&lt;code&gt;fgm list-remote&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载一个版本:&lt;code&gt;fgm install 1.23.1&lt;/code&gt;,(这里的1.23.1可以替换为你想下载的第三步中查询到的版本号)&lt;/li&gt;
&lt;li&gt;列举已经被下载到本地的版本:&lt;code&gt;fgm ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启用指定版本&lt;code&gt;fgm use 1.23.1&lt;/code&gt;, 如果启用的版本在本地不存在,则会尝试下载&lt;/li&gt;
&lt;li&gt;查看当前已经下载到本地的go的列表&lt;code&gt;fgm list&lt;/code&gt;, 可以看到其中一项为&lt;code&gt;1.23.1 (current)&lt;/code&gt;，表示版本1.23.1不仅已经被下载到本地，并且被设置为当前启用版本&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;go version&lt;/code&gt;, 能够查看到输入的go版本为&lt;code&gt;1.23.1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: 第一次使用&lt;code&gt;fgm list-remote&lt;/code&gt;的时候fgm 会联网搜索当前最新的golang官网的可下载版本列表, 可能会比较慢, 但是执行成功一次后会把搜索到的信息记录到本地,然后之后默认会使用本地记录的版本列表. 如果需要刷新列表,可以调用&lt;code&gt;fgm update&lt;/code&gt;命令,或者是使用&lt;code&gt;-u&lt;/code&gt;参数&lt;/p&gt;
&lt;h2 id=&#34;高级用法&#34;&gt;高级用法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;fgm config&lt;/code&gt;可以查看fgm使用的各种配置文件路径,配置项内容&lt;/li&gt;
&lt;li&gt;你可以通过修改配置文件来设置fgm下载go工具链用的地址等等&lt;/li&gt;
&lt;li&gt;值得一提,fgm遵守XDG目录规范&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
